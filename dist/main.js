(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),i=n(645),c=n.n(i)()(r());c.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: rgb(228, 195, 195);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#container {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr 2fr 2fr;\n\n    margin: 13vh 8vw;\n    height: 70vh;\n    width: 80vw;\n    padding: 2vh;\n    border-radius: 12px;\n    background-color: rgb(248, 240, 240);\n    color: rgb(124, 72, 72);\n}\n\n#todo-list {\n    display: flex;\n    flex-flow: column;\n}\n\n#todo-list button {\n    border: none;\n    border-radius: 6px;\n    width: 5rem;\n    padding: 0.3rem;\n    margin: 0.5rem;\n}\n\n#todo-list input {\n    display: block;\n    margin-bottom: 0.5rem;\n}\n\nbutton:hover,\n#files-container div:hover,\n#todo-items-container div:hover {\n    cursor: pointer;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,oCAAoC;IACpC,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kCAAkC;;IAElC,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,oCAAoC;IACpC,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,WAAW;IACX,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,qBAAqB;AACzB;;AAEA;;;IAGI,eAAe;AACnB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: rgb(228, 195, 195);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#container {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr 2fr 2fr;\n\n    margin: 13vh 8vw;\n    height: 70vh;\n    width: 80vw;\n    padding: 2vh;\n    border-radius: 12px;\n    background-color: rgb(248, 240, 240);\n    color: rgb(124, 72, 72);\n}\n\n#todo-list {\n    display: flex;\n    flex-flow: column;\n}\n\n#todo-list button {\n    border: none;\n    border-radius: 6px;\n    width: 5rem;\n    padding: 0.3rem;\n    margin: 0.5rem;\n}\n\n#todo-list input {\n    display: block;\n    margin-bottom: 0.5rem;\n}\n\nbutton:hover,\n#files-container div:hover,\n#todo-items-container div:hover {\n    cursor: pointer;\n}"],sourceRoot:""}]);const d=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var d=0;d<this.length;d++){var a=this[d][0];null!=a&&(c[a]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);o&&c[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),c=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(c).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},c=[],d=0;d<e.length;d++){var a=e[d],l=o.base?a[0]+o.base:a[0],s=i[l]||0,u="".concat(l," ").concat(s);i[l]=s+1;var m=n(u),p={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==m)t[m].references++,t[m].updater(p);else{var f=r(p,o);o.byIndex=d,t.splice(d,0,{identifier:u,updater:f,references:1})}c.push(u)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<i.length;c++){var d=n(i[c]);t[d].references--}for(var a=o(e,r),l=0;l<i.length;l++){var s=n(i[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=a}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),c=n.n(i),d=n(565),a=n.n(d),l=n(216),s=n.n(l),u=n(589),m=n.n(u),p=n(426),f={};f.styleTagTransform=m(),f.setAttributes=a(),f.insert=c().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=s(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const A=[],h=e=>{const t=document.createElement("div");t.id=e,t.textContent=e,t.addEventListener("click",(()=>{document.getElementById("fileName").value=e})),t.addEventListener("click",(()=>{g(e)})),document.getElementById("files-container").appendChild(t)},g=e=>{const t=document.getElementById("todo-item");t.children.length&&t.removeChild(t.firstChild);const n=document.getElementById("todo-items-container");for(;n.firstChild;)n.removeChild(n.firstChild);for(let t=0;t<A.length;t++)if(A[t].fileName===e){const e=document.createElement("div");"high"===A[t].priority&&(e.style.fontWeight="bold",e.style.color="#b20000"),e.textContent=A[t].title;const n=document.createElement("p");n.textContent=`Due: ${A[t].due}`,e.appendChild(n),e.appendChild(y(A[t].title,A[t].fileName)),document.getElementById("todo-items-container").appendChild(e),e.addEventListener("click",(()=>{const e=A[t].title;v(e)}))}},v=e=>{const t=document.getElementById("todo-item");t.children.length&&t.removeChild(t.firstChild);for(let n=0;n<A.length;n++)if(A[n].title===e){const e=document.createElement("div"),o=document.createElement("h3");o.textContent=A[n].title;const r=document.createElement("p");r.textContent=A[n].desc;const i=document.createElement("p");i.textContent=`Due: ${A[n].due}`;const c=document.createElement("p");"high"===A[n].priority&&(c.style.fontWeight="bold",c.style.color="#b20000"),c.textContent=`Priority: ${A[n].priority}`,e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(c),t.appendChild(e)}},C=()=>{const e=document.getElementById("new-todo-form");!0===e.hidden?e.hidden=!1:e.hidden=!0},y=(e,t)=>{const n=document.createElement("button");return n.textContent="Delete",n.addEventListener("click",(()=>{!function(e){for(let t=0;t<A.length;t++)A[t].title===e&&(localStorage.removeItem(e),A.splice(t,1))}(e),g(t);const n=document.getElementById("todo-item");n.length&&n.removeChild(n.firstChild)})),n},b=(e,t)=>{const n=document.createElement("input");n.setAttribute("type",t),n.id=e;const o=document.createElement("label");o.setAttribute("for",e),o.textContent=e;const r=document.getElementById("new-todo-form");r.appendChild(o),r.appendChild(n)};if(0!=localStorage.length)for(let e=0;e<localStorage.length;e++){let t=localStorage.key(e);const n=JSON.parse(localStorage.getItem(t));A.push(n)}(()=>{const e=document.createElement("button");e.textContent="New",e.addEventListener("click",(()=>{const e=prompt("Please name your new file.","New File");h(e)})),document.getElementById("files-container").appendChild(e)})(),(()=>{const e=[];for(let t=0;t<A.length;t++)e.includes(A[t].fileName)||e.push(A[t].fileName);for(let t=0;t<e.length;t++)h(e[t])})(),g("Notes"),document.getElementById("add-button-container").appendChild((()=>{const e=document.createElement("button");return e.textContent="Add",e.addEventListener("click",C),e})()),(()=>{const e=document.createElement("form");e.hidden=!0,e.id="new-todo-form",document.getElementById("add-button-container").appendChild(e),b("Title","text"),b("Description","text"),b("Due","date");const t=document.createElement("input");t.setAttribute("type","checkbox"),t.id="priority";const n=document.createElement("label");n.setAttribute("for","priority"),n.textContent="Prioritize?",e.appendChild(n),e.appendChild(t);const o=document.createElement("input");o.id="fileName",o.setAttribute("type","hidden"),o.setAttribute("value","Notes"),e.appendChild(o);const r=document.createElement("input");r.setAttribute("type","submit"),r.id="submit-button",r.value="Add to List",e.appendChild(r),r.addEventListener("click",(function(t){t.preventDefault(),function(){const e={title:document.getElementById("Title").value,desc:document.getElementById("Description").value,due:document.getElementById("Due").value,priority:document.getElementById("priority").checked?"high":"low",fileName:document.getElementById("fileName").value};localStorage.setItem(e.title,JSON.stringify(e)),A.push(e)}(),(()=>{const e=document.createElement("div");"high"===A[A.length-1].priority&&(e.style.fontWeight="bold",e.style.color="#b20000"),e.textContent=A[A.length-1].title;const t=document.createElement("p");t.textContent=`Due: ${A[A.length-1].due}`,e.appendChild(t),document.getElementById("todo-items-container").appendChild(e),e.appendChild(y(A[A.length-1].title,A[A.length-1].fileName));const n=A[A.length-1].title;e.addEventListener("click",(()=>{v(n)}))})(),e.hidden=!0,e.reset()}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,